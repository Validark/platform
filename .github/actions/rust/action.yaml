---
name: "Rust Dependencies"
description: "Install dependencies"
inputs:
  toolchain:
    description: Rust toolchain to use, stable / nightly / beta, or exact version
    # The same as in /README.md
    default: "1.73"
  target:
    description: Target Rust platform
    required: false
    default: x86_64-unknown-linux-gnu
  components:
    description: List of additional Rust toolchain components to install
    required: false
  cache:
    description: Enable Rust cache
    required: false
    default: 'true'
#  bucket:
#    description: S3 bucket to use for caching, must match runner define in `runs-on`
#    default: multi-runner-linux-x64-platform-cache-ui535z23

runs:
  using: composite
  steps:
    # TODO: Move to AMI and build every day
    - uses: dtolnay/rust-toolchain@master
      name: Install Rust toolchain
      with:
        toolchain: ${{ inputs.toolchain }}
        target: ${{ inputs.target }}
        components: ${{ inputs.components }}
#      env:
#        CARGO_INCREMENTAL: "1"

    # TODO: Move to AMI and build every day
    - name: Install protoc
      id: deps-protoc
      shell: bash
      run: |
        curl -Lo /tmp/protoc.zip \
          https://github.com/protocolbuffers/protobuf/releases/download/v22.0/protoc-22.0-linux-x86_64.zip
        unzip /tmp/protoc.zip -d ${HOME}/.local
        echo "PROTOC=${HOME}/.local/bin/protoc" >> $GITHUB_ENV
        export PATH="${PATH}:${HOME}/.local/bin"

#    - name: Run sccache-cache
#      uses: mozilla-actions/sccache-action@v0.0.3
#      with:
#        version: "v0.7.0"

    - name: Hash ref_name
      id: hashed-ref-name
      shell: bash
      run: echo "key=$(echo '${{ github.ref_name }}' | sha256sum | cut -d ' ' -f1)" >> $GITHUB_OUTPUT

#    - id: build-cache-start
#      shell: bash
#      run: echo "start_time=$(date +%s)" >> $GITHUB_OUTPUT
#
#    - name: Cache Rust build artifacts (S3 bucket cache)
#      uses: strophy/actions-cache@opendal-update
#      if: contains(runner.name, 'ubuntu-platform') && inputs.cache == 'true'
#      with:
#        bucket: multi-runner-linux-x64-platform-cache-ui535z23
#        root: actions-cache
#        path: |
#          target
#          retimer-state
#        key: ${{ runner.os }}/cargo/build/${{ inputs.target }}/${{ hashFiles('**/Cargo.lock') }}/${{ steps.hashed-ref-name.outputs.key }}/${{ github.sha }}
#        restore-keys: |
#          ${{ runner.os }}/cargo/build/${{ inputs.target }}/${{ hashFiles('**/Cargo.lock') }}/${{ steps.hashed-ref-name.outputs.key }}/${{ github.sha }}
#          ${{ runner.os }}/cargo/build/${{ inputs.target }}/${{ hashFiles('**/Cargo.lock') }}/${{ steps.hashed-ref-name.outputs.key }}/
#          ${{ runner.os }}/cargo/build/${{ inputs.target }}/${{ hashFiles('**/Cargo.lock') }}/
#          ${{ runner.os }}/cargo/build/${{ inputs.target }}/

#    - shell: bash
#      run: |
#        echo "Elapsed time: $(($(date +%s) - ${{ steps.build-cache-start.outputs.start_time }})) seconds"

    - id: registry-cache-start
      shell: bash
      run: echo "start_time=$(date +%s)" >> $GITHUB_OUTPUT

    - name: Cache cargo registry (S3 bucket cache)
      uses: strophy/actions-cache@opendal-update
      if: contains(runner.name, 'ubuntu-platform') && inputs.cache == 'true'
      with:
        bucket: multi-runner-linux-x64-platform-cache-ui535z23
        root: actions-cache
        path: |
          /home/ubuntu/.cargo/registry/index
          /home/ubuntu/.cargo/registry/cache
          /home/ubuntu/.cargo/git
        key: ${{ runner.os }}/cargo/registry/${{ hashFiles('**/Cargo.lock') }}
        restore-keys: |
          ${{ runner.os }}/cargo/registry/${{ hashFiles('**/Cargo.lock') }}
          ${{ runner.os }}/cargo/registry/

    - shell: bash
      run: |
        echo "Elapsed time: $(($(date +%s) - ${{ steps.registry-cache-start.outputs.start_time }})) seconds"

#    - name: Cache Rust build artifacts (GitHub Actions cache)
#      uses: actions/cache@v3
#      if: ${{ !contains(runner.name, 'ubuntu-platform') && inputs.cache == 'true' }}
#      with:
#        path: |
#          target
#          retimer-state
#        key: ${{ runner.os }}-cargo-build-${{ inputs.target }}-${{ hashFiles('**/Cargo.lock') }}-${{ steps.hashed-ref-name.outputs.key }}-${{ github.sha }}
#        restore-keys: |
#          ${{ runner.os }}/cargo/build/${{ inputs.target }}/${{ hashFiles('**/Cargo.lock') }}-${{ steps.hashed-ref-name.outputs.key }}-${{ github.sha }}
#          ${{ runner.os }}/cargo/build/${{ inputs.target }}/${{ hashFiles('**/Cargo.lock') }}-${{ steps.hashed-ref-name.outputs.key }}-
#          ${{ runner.os }}/cargo/build/${{ inputs.target }}/${{ hashFiles('**/Cargo.lock') }}-
#          ${{ runner.os }}/cargo/build/${{ inputs.target }}/

#    - name: Cache cargo registry (GitHub Actions cache)
#      uses: actions/cache@v3
#      if: ${{ !contains(runner.name, 'ubuntu-platform') && inputs.cache == 'true' }}
#      with:
#        path: |
#          /home/ubuntu/.cargo/registry/index
#          /home/ubuntu/.cargo/registry/cache
#          /home/ubuntu/.cargo/git
#        key: ${{ runner.os }}-cargo-registry-${{ hashFiles('**/Cargo.lock') }}
#        restore-keys: |
#          ${{ runner.os }}-cargo-registry-${{ hashFiles('**/Cargo.lock') }}
#          ${{ runner.os }}-cargo-registry-

    - name: Install clang
      id: deps-clang
      shell: bash
      if: runner.os == 'Linux'
      run: |
        sudo apt update -qq
        sudo apt install -qq --yes clang llvm
        sudo update-alternatives --set cc /usr/bin/clang
    # b3sum
#    - id: retimer-start
#      shell: bash
#      run: echo "start_time=$(date +%s)" >> $GITHUB_OUTPUT
#
#    - name: Run retimer to adjust source files mtime for cargo build cache
#      uses: dcginfra/retimer@master
#
#    - shell: bash
#      run: |
#        echo "Elapsed time: $(($(date +%s) - ${{ steps.retimer-start.outputs.start_time }})) seconds"
