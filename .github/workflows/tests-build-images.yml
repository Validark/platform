on:
  workflow_call:

jobs:
  build-images:
    name: Build images
    runs-on: [ "self-hosted", "linux", "x64", "ubuntu-platform" ]
    steps:
      - name: Check out repo
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Restore timestamps
        uses: chetan/git-restore-mtime-action@v2

      - name: Login to DockerHub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Configure AWS credentials and bucket region
        uses: aws-actions/configure-aws-credentials@v4
        if: contains(runner.name, 'ubuntu-platform')
        with:
          aws-region: ${{ vars.AWS_REGION }}

      - name: Setup Node.JS
        uses: ./.github/actions/nodejs

      - name: Restore JS build artifacts archive
        uses: everpcpc/actions-cache@v1
        with:
          bucket: multi-runner-linux-x64-platform-cache-ui535z23
          root: actions-cache
          path: build-js-artifacts-${{ github.sha }}.tar
          key: ${{ runner.os }}-build-js-artifacts-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-build-js-artifacts-${{ github.sha }}

      - name: Unpack JS build artifacts archive
        run: tar -xf build-js-artifacts-${{ github.sha }}.tar

      - name: Set up Docker BuildX
        uses: docker/setup-buildx-action@v3
        with:
          install: true
          driver-opts: env.BUILDKIT_STEP_LOG_MAX_SIZE=10485760
          config-inline: |
            [worker.oci]
              gc = true
              gckeepstorage = 40000 # 40 GB
              [[worker.oci.gcpolicy]]
                all = true
                keepBytes = 30000000000 # 30 GB
                keepDuration = 864000 # 10 days

      - name: Load Docker mount cache
        uses: dcginfra/buildkit-cache-dance/inject@main
        with:
          bucket: multi-runner-linux-x64-platform-cache-ui535z23
          mounts: |
            cargo_registry_index
            cargo_registry_cache
            cargo_git
            target_amd64
            target_wasm
            unplugged_amd64

      - name: Configure Drive ABCI layer cache
        uses: ./.github/actions/s3-layer-cache-settings
        id: drive_abci_layer_cache_settings
        with:
          name: dashpay/drive

      - name: Configure DAPI layer cache
        uses: ./.github/actions/s3-layer-cache-settings
        id: dapi_layer_cache_settings
        with:
          name: dashpay/dapi

      - name: Configure Dashmate Helper layer cache
        uses: ./.github/actions/s3-layer-cache-settings
        id: dashmate_helper_layer_cache_settings
        with:
          name: dashpay/dashmate-helper

      - name: Configure base image layer cache
        uses: ./.github/actions/s3-layer-cache-settings
        id: base_layer_cache_settings
        with:
          name: dashpay/base

      - name: Configure services to be built
        run: |
          yarn dashmate config set --config=local platform.drive.abci.docker.build.enabled true
          yarn dashmate config set --config=local platform.dapi.api.docker.build.enabled true
          yarn dashmate config set --config=local dashmate.helper.docker.build.enabled true

      - name: Build docker images
        run: yarn dashmate docker build --config local
        env:
          CACHE_DRIVE_ABCI_FROM: ${{ steps.drive_abci_layer_cache_settings.outputs.cache_from }}
          CACHE_DRIVE_ABCI_TO: ${{ steps.drive_abci_layer_cache_settings.outputs.cache_to }}
          CACHE_DAPI_API_FROM: ${{ steps.dapi_layer_cache_settings.outputs.cache_from }}
          CACHE_DAPI_API_TO: ${{ steps.dapi_layer_cache_settings.outputs.cache_to }}
          CACHE_DASHMATE_HELPER_FROM: ${{ steps.dashmate_helper_layer_cache_settings.outputs.cache_from }}
          CACHE_DASHMATE_HELPER_TO: ${{ steps.dashmate_helper_layer_cache_settings.outputs.cache_to }}
          CACHE_BASE_FROM: ${{ steps.base_layer_cache_settings.outputs.cache_from }}
          CACHE_BASE_TO: ${{ steps.base_layer_cache_settings.outputs.cache_to }}

      - name: Store Docker mount cache
        uses: dcginfra/buildkit-cache-dance/extract@main
        with:
          bucket: multi-runner-linux-x64-platform-cache-ui535z23
          mounts: |
            cargo_registry_index
            cargo_registry_cache
            cargo_git
            target_amd64
            target_wasm
            unplugged_amd64

      - name: Tag and push images
        shell: bash
        run: |
          aws ecr get-login-password --region ${{ vars.AWS_REGION }} | docker login --username AWS --password-stdin ${{ vars.AWS_ACCOUNT_ID }}.dkr.ecr.${{ vars.AWS_REGION }}.amazonaws.com
          GIT_SHA=$(git rev-parse --short HEAD)
          images=("dapi:local" "drive:local" "dashmate_helper:local")
          for image in "${images[@]}"; do
            new_image_tag="${{ vars.AWS_ACCOUNT_ID }}.dkr.ecr.${{ vars.AWS_REGION }}.amazonaws.com/${image%:local}:$GIT_SHA"
            docker tag "$image" "$new_image_tag"
            docker push "$new_image_tag"
          done
