name: Tests

on:
  workflow_dispatch:
  pull_request:
    types: [opened, synchronize, reopened, ready_for_review]
    branches:
      - master
      - v[0-9]+\.[0-9]+-dev
  schedule:
    - cron: '30 4 * * *'

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  changes:
    name: Determine changed packages
    runs-on: ubuntu-latest
    outputs:
      js-packages: ${{ steps.filter-js.outputs.changes }}
      rs-packages: ${{ steps.filter-rs.outputs.changes }}
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - uses: dorny/paths-filter@v2
        id: filter-js
        with:
          filters: .github/filters-js.yml

      - uses: dorny/paths-filter@v2
        id: filter-rs
        with:
          filters: .github/filters-rs.yml

  build-js:
    # TODO: Store build artifacts so they are available in later runs
    name: Build JS
    runs-on: [ "self-hosted", "linux", "x64", "ubuntu-platform" ]
    steps:
      - name: Check out repo
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Restore timestamps
        uses: chetan/git-restore-mtime-action@v2

      - name: Login to DockerHub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Setup Node.JS
        uses: ./.github/actions/nodejs

      - name: Setup Rust
        uses: ./.github/actions/rust
        with:
          target: wasm32-unknown-unknown

      - name: Build SDK
        run: yarn workspace @dashevo/wasm-dpp build

  build-images:
    name: Build images
    needs: [build-js]
    runs-on: [ "self-hosted", "linux", "x64", "ubuntu-platform" ]
    steps:
      - name: Check out repo
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Restore timestamps
        uses: chetan/git-restore-mtime-action@v2

      - name: Login to DockerHub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Setup Node.JS
        uses: ./.github/actions/nodejs

      - name: Setup Rust
        uses: ./.github/actions/rust
        with:
          target: wasm32-unknown-unknown

      - name: Build SDK
        run: yarn build --filter "+dash"

      - name: Set up Docker BuildX
        uses: docker/setup-buildx-action@v3
        with:
          install: true
          driver-opts: env.BUILDKIT_STEP_LOG_MAX_SIZE=10485760
          config-inline: |
            [worker.oci]
              gc = true
              gckeepstorage = 40000 # 40 GB
              [[worker.oci.gcpolicy]]
                all = true
                keepBytes = 30000000000 # 30 GB
                keepDuration = 864000 # 10 days

      - name: Load Docker mount cache
        uses: dcginfra/buildkit-cache-dance/inject@main
        with:
          bucket: multi-runner-linux-x64-platform-cache-ui535z23
          mounts: |
            cargo_registry_index
            cargo_registry_cache
            cargo_git
            target_amd64
            target_wasm
            unplugged_amd64

      - name: Configure Drive ABCI layer cache
        uses: ./.github/actions/s3-layer-cache-settings
        id: drive_abci_layer_cache_settings
        with:
          name: dashpay/drive

      - name: Configure DAPI layer cache
        uses: ./.github/actions/s3-layer-cache-settings
        id: dapi_layer_cache_settings
        with:
          name: dashpay/dapi

      - name: Configure Dashmate Helper layer cache
        uses: ./.github/actions/s3-layer-cache-settings
        id: dashmate_helper_layer_cache_settings
        with:
          name: dashpay/dashmate-helper

      - name: Configure base image layer cache
        uses: ./.github/actions/s3-layer-cache-settings
        id: base_layer_cache_settings
        with:
          name: dashpay/base

      - name: Build docker images
        run: yarn dashmate docker build --config local
        env:
          CACHE_DRIVE_ABCI_FROM: ${{ steps.drive_abci_layer_cache_settings.outputs.cache_from }}
          CACHE_DRIVE_ABCI_TO: ${{ steps.drive_abci_layer_cache_settings.outputs.cache_to }}
          CACHE_DAPI_API_FROM: ${{ steps.dapi_layer_cache_settings.outputs.cache_from }}
          CACHE_DAPI_API_TO: ${{ steps.dapi_layer_cache_settings.outputs.cache_to }}
          CACHE_DASHMATE_HELPER_FROM: ${{ steps.dashmate_helper_layer_cache_settings.outputs.cache_from }}
          CACHE_DASHMATE_HELPER_TO: ${{ steps.dashmate_helper_layer_cache_settings.outputs.cache_to }}
          CACHE_BASE_FROM: ${{ steps.base_layer_cache_settings.outputs.cache_from }}
          CACHE_BASE_TO: ${{ steps.base_layer_cache_settings.outputs.cache_to }}

      - name: Store Docker mount cache
        uses: dcginfra/buildkit-cache-dance/extract@main
        with:
          bucket: multi-runner-linux-x64-platform-cache-ui535z23
          mounts: |
            cargo_registry_index
            cargo_registry_cache
            cargo_git
            target_amd64
            target_wasm
            unplugged_amd64

  build-rust:
    name: Build Rust
    runs-on: [ "self-hosted", "linux", "x64", "ubuntu-platform" ]
    steps:
      - name: Check out repo
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Restore timestamps
        uses: chetan/git-restore-mtime-action@v2

      - name: Login to DockerHub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Setup Rust
        uses: ./.github/actions/rust

      - name: Build Rust packages
        run: cargo build

  js-checks:
    name: JS Checks
    needs: [changes, build-js]
    secrets: inherit
    if: ${{ github.event_name == 'push' || github.event_name == 'workflow_dispatch' || github.event_name == 'schedule' || !github.event.pull_request.draft }}
    strategy:
      matrix:
        js-package: ${{ fromJson(needs.changes.outputs.js-packages) }}
    uses: ./.github/workflows/js-checks.yml
    with:
      package: ${{ matrix.js-package }}
      skip-tests: ${{ contains(matrix.js-package, 'platform-test-suite') }}

  rs-checks:
    name: Rust Checks
    needs: [changes, build-rust]
    secrets: inherit
    if: ${{ github.event_name == 'push' || github.event_name == 'workflow_dispatch' || github.event_name == 'schedule' || !github.event.pull_request.draft }}
    strategy:
      matrix:
        rs-package: ${{ fromJson(needs.changes.outputs.rs-packages) }}
    uses: ./.github/workflows/rs-checks.yml
    with:
      package: ${{ matrix.rs-package }}
