# This file was autogenerated by some hot garbage in the `uniffi` crate.
# Trust me, you don't want to mess with it!

# Common helper code.
#
# Ideally this would live in a separate .py file where it can be unittested etc
# in isolation, and perhaps even published as a re-useable package.
#
# However, it's important that the details of how this helper code works (e.g. the
# way that different builtin types are passed across the FFI) exactly match what's
# expected by the rust code on the other side of the interface. In practice right
# now that means coming from the exact some version of `uniffi` that was used to
# compile the rust component. The easiest way to ensure this is to bundle the Python
# helpers directly inline like we're doing here.

import os
import sys
import ctypes
import enum
import struct
import contextlib
import datetime
import typing
import platform

# Used for default argument values
_DEFAULT = object()


class _UniffiRustBuffer(ctypes.Structure):
    _fields_ = [
        ("capacity", ctypes.c_int32),
        ("len", ctypes.c_int32),
        ("data", ctypes.POINTER(ctypes.c_char)),
    ]

    @staticmethod
    def alloc(size):
        return _rust_call(_UniffiLib.ffi_dash_drive_v0_rustbuffer_alloc, size)

    @staticmethod
    def reserve(rbuf, additional):
        return _rust_call(_UniffiLib.ffi_dash_drive_v0_rustbuffer_reserve, rbuf, additional)

    def free(self):
        return _rust_call(_UniffiLib.ffi_dash_drive_v0_rustbuffer_free, self)

    def __str__(self):
        return "_UniffiRustBuffer(capacity={}, len={}, data={})".format(
            self.capacity,
            self.len,
            self.data[0:self.len]
        )

    @contextlib.contextmanager
    def alloc_with_builder(*args):
        """Context-manger to allocate a buffer using a _UniffiRustBufferBuilder.

        The allocated buffer will be automatically freed if an error occurs, ensuring that
        we don't accidentally leak it.
        """
        builder = _UniffiRustBufferBuilder()
        try:
            yield builder
        except:
            builder.discard()
            raise

    @contextlib.contextmanager
    def consume_with_stream(self):
        """Context-manager to consume a buffer using a _UniffiRustBufferStream.

        The _UniffiRustBuffer will be freed once the context-manager exits, ensuring that we don't
        leak it even if an error occurs.
        """
        try:
            s = _UniffiRustBufferStream.from_rust_buffer(self)
            yield s
            if s.remaining() != 0:
                raise RuntimeError("junk data left in buffer at end of consume_with_stream")
        finally:
            self.free()

    @contextlib.contextmanager
    def read_with_stream(self):
        """Context-manager to read a buffer using a _UniffiRustBufferStream.

        This is like consume_with_stream, but doesn't free the buffer afterwards.
        It should only be used with borrowed `_UniffiRustBuffer` data.
        """
        s = _UniffiRustBufferStream.from_rust_buffer(self)
        yield s
        if s.remaining() != 0:
            raise RuntimeError("junk data left in buffer at end of read_with_stream")

class _UniffiForeignBytes(ctypes.Structure):
    _fields_ = [
        ("len", ctypes.c_int32),
        ("data", ctypes.POINTER(ctypes.c_char)),
    ]

    def __str__(self):
        return "_UniffiForeignBytes(len={}, data={})".format(self.len, self.data[0:self.len])


class _UniffiRustBufferStream:
    """
    Helper for structured reading of bytes from a _UniffiRustBuffer
    """

    def __init__(self, data, len):
        self.data = data
        self.len = len
        self.offset = 0

    @classmethod
    def from_rust_buffer(cls, buf):
        return cls(buf.data, buf.len)

    def remaining(self):
        return self.len - self.offset

    def _unpack_from(self, size, format):
        if self.offset + size > self.len:
            raise InternalError("read past end of rust buffer")
        value = struct.unpack(format, self.data[self.offset:self.offset+size])[0]
        self.offset += size
        return value

    def read(self, size):
        if self.offset + size > self.len:
            raise InternalError("read past end of rust buffer")
        data = self.data[self.offset:self.offset+size]
        self.offset += size
        return data

    def read_i8(self):
        return self._unpack_from(1, ">b")

    def read_u8(self):
        return self._unpack_from(1, ">B")

    def read_i16(self):
        return self._unpack_from(2, ">h")

    def read_u16(self):
        return self._unpack_from(2, ">H")

    def read_i32(self):
        return self._unpack_from(4, ">i")

    def read_u32(self):
        return self._unpack_from(4, ">I")

    def read_i64(self):
        return self._unpack_from(8, ">q")

    def read_u64(self):
        return self._unpack_from(8, ">Q")

    def read_float(self):
        v = self._unpack_from(4, ">f")
        return v

    def read_double(self):
        return self._unpack_from(8, ">d")

    def read_c_size_t(self):
        return self._unpack_from(ctypes.sizeof(ctypes.c_size_t) , "@N")

class _UniffiRustBufferBuilder:
    """
    Helper for structured writing of bytes into a _UniffiRustBuffer.
    """

    def __init__(self):
        self.rbuf = _UniffiRustBuffer.alloc(16)
        self.rbuf.len = 0

    def finalize(self):
        rbuf = self.rbuf
        self.rbuf = None
        return rbuf

    def discard(self):
        if self.rbuf is not None:
            rbuf = self.finalize()
            rbuf.free()

    @contextlib.contextmanager
    def _reserve(self, num_bytes):
        if self.rbuf.len + num_bytes > self.rbuf.capacity:
            self.rbuf = _UniffiRustBuffer.reserve(self.rbuf, num_bytes)
        yield None
        self.rbuf.len += num_bytes

    def _pack_into(self, size, format, value):
        with self._reserve(size):
            # XXX TODO: I feel like I should be able to use `struct.pack_into` here but can't figure it out.
            for i, byte in enumerate(struct.pack(format, value)):
                self.rbuf.data[self.rbuf.len + i] = byte

    def write(self, value):
        with self._reserve(len(value)):
            for i, byte in enumerate(value):
                self.rbuf.data[self.rbuf.len + i] = byte

    def write_i8(self, v):
        self._pack_into(1, ">b", v)

    def write_u8(self, v):
        self._pack_into(1, ">B", v)

    def write_i16(self, v):
        self._pack_into(2, ">h", v)

    def write_u16(self, v):
        self._pack_into(2, ">H", v)

    def write_i32(self, v):
        self._pack_into(4, ">i", v)

    def write_u32(self, v):
        self._pack_into(4, ">I", v)

    def write_i64(self, v):
        self._pack_into(8, ">q", v)

    def write_u64(self, v):
        self._pack_into(8, ">Q", v)

    def write_float(self, v):
        self._pack_into(4, ">f", v)

    def write_double(self, v):
        self._pack_into(8, ">d", v)

    def write_c_size_t(self, v):
        self._pack_into(ctypes.sizeof(ctypes.c_size_t) , "@N", v)
# A handful of classes and functions to support the generated data structures.
# This would be a good candidate for isolating in its own ffi-support lib.

class InternalError(Exception):
    pass

class _UniffiRustCallStatus(ctypes.Structure):
    """
    Error runtime.
    """
    _fields_ = [
        ("code", ctypes.c_int8),
        ("error_buf", _UniffiRustBuffer),
    ]

    # These match the values from the uniffi::rustcalls module
    CALL_SUCCESS = 0
    CALL_ERROR = 1
    CALL_PANIC = 2

    def __str__(self):
        if self.code == _UniffiRustCallStatus.CALL_SUCCESS:
            return "_UniffiRustCallStatus(CALL_SUCCESS)"
        elif self.code == _UniffiRustCallStatus.CALL_ERROR:
            return "_UniffiRustCallStatus(CALL_ERROR)"
        elif self.code == _UniffiRustCallStatus.CALL_PANIC:
            return "_UniffiRustCallStatus(CALL_PANIC)"
        else:
            return "_UniffiRustCallStatus(<invalid code>)"

def _rust_call(fn, *args):
    # Call a rust function
    return _rust_call_with_error(None, fn, *args)

def _rust_call_with_error(error_ffi_converter, fn, *args):
    # Call a rust function and handle any errors
    #
    # This function is used for rust calls that return Result<> and therefore can set the CALL_ERROR status code.
    # error_ffi_converter must be set to the _UniffiConverter for the error class that corresponds to the result.
    call_status = _UniffiRustCallStatus(code=_UniffiRustCallStatus.CALL_SUCCESS, error_buf=_UniffiRustBuffer(0, 0, None))

    args_with_error = args + (ctypes.byref(call_status),)
    result = fn(*args_with_error)
    _uniffi_check_call_status(error_ffi_converter, call_status)
    return result

def _rust_call_async(scaffolding_fn, callback_fn, *args):
    # Call the scaffolding function, passing it a callback handler for `AsyncTypes.py` and a pointer
    # to a python Future object.  The async function then awaits the Future.
    uniffi_eventloop = asyncio.get_running_loop()
    uniffi_py_future = uniffi_eventloop.create_future()
    uniffi_call_status = _UniffiRustCallStatus(code=_UniffiRustCallStatus.CALL_SUCCESS, error_buf=_UniffiRustBuffer(0, 0, None))
    scaffolding_fn(*args,
       _UniffiConverterForeignExecutor._pointer_manager.new_pointer(uniffi_eventloop),
       callback_fn,
       # Note: It's tempting to skip the pointer manager and just use a `py_object` pointing to a
       # local variable like we do in Swift.  However, Python doesn't use cooperative cancellation
       # -- asyncio can cancel a task at anytime.  This means if we use a local variable, the Rust
       # callback could fire with a dangling pointer.
       _UniffiPyFuturePointerManager.new_pointer(uniffi_py_future),
       ctypes.byref(uniffi_call_status),
    )
    _uniffi_check_call_status(None, uniffi_call_status)
    return uniffi_py_future

def _uniffi_check_call_status(error_ffi_converter, call_status):
    if call_status.code == _UniffiRustCallStatus.CALL_SUCCESS:
        pass
    elif call_status.code == _UniffiRustCallStatus.CALL_ERROR:
        if error_ffi_converter is None:
            call_status.error_buf.free()
            raise InternalError("_rust_call_with_error: CALL_ERROR, but error_ffi_converter is None")
        else:
            raise error_ffi_converter.lift(call_status.error_buf)
    elif call_status.code == _UniffiRustCallStatus.CALL_PANIC:
        # When the rust code sees a panic, it tries to construct a _UniffiRustBuffer
        # with the message.  But if that code panics, then it just sends back
        # an empty buffer.
        if call_status.error_buf.len > 0:
            msg = _UniffiConverterString.lift(call_status.error_buf)
        else:
            msg = "Unknown rust panic"
        raise InternalError(msg)
    else:
        raise InternalError("Invalid _UniffiRustCallStatus code: {}".format(
            call_status.code))

# A function pointer for a callback as defined by UniFFI.
# Rust definition `fn(handle: u64, method: u32, args: _UniffiRustBuffer, buf_ptr: *mut _UniffiRustBuffer) -> int`
_UNIFFI_FOREIGN_CALLBACK_T = ctypes.CFUNCTYPE(ctypes.c_int, ctypes.c_ulonglong, ctypes.c_ulong, ctypes.POINTER(ctypes.c_char), ctypes.c_int, ctypes.POINTER(_UniffiRustBuffer))
class _UniffiPointerManagerCPython:
    """
    Manage giving out pointers to Python objects on CPython

    This class is used to generate opaque pointers that reference Python objects to pass to Rust.
    It assumes a CPython platform.  See _UniffiPointerManagerGeneral for the alternative.
    """

    def new_pointer(self, obj):
        """
        Get a pointer for an object as a ctypes.c_size_t instance

        Each call to new_pointer() must be balanced with exactly one call to release_pointer()

        This returns a ctypes.c_size_t.  This is always the same size as a pointer and can be
        interchanged with pointers for FFI function arguments and return values.
        """
        # IncRef the object since we're going to pass a pointer to Rust
        ctypes.pythonapi.Py_IncRef(ctypes.py_object(obj))
        # id() is the object address on CPython
        # (https://docs.python.org/3/library/functions.html#id)
        return id(obj)

    def release_pointer(self, address):
        py_obj = ctypes.cast(address, ctypes.py_object)
        obj = py_obj.value
        ctypes.pythonapi.Py_DecRef(py_obj)
        return obj

    def lookup(self, address):
        return ctypes.cast(address, ctypes.py_object).value

class _UniffiPointerManagerGeneral:
    """
    Manage giving out pointers to Python objects on non-CPython platforms

    This has the same API as _UniffiPointerManagerCPython, but doesn't assume we're running on
    CPython and is slightly slower.

    Instead of using real pointers, it maps integer values to objects and returns the keys as
    c_size_t values.
    """

    def __init__(self):
        self._map = {}
        self._lock = threading.Lock()
        self._current_handle = 0

    def new_pointer(self, obj):
        with self._lock:
            handle = self._current_handle
            self._current_handle += 1
            self._map[handle] = obj
        return handle

    def release_pointer(self, handle):
        with self._lock:
            return self._map.pop(handle)

    def lookup(self, handle):
        with self._lock:
            return self._map[handle]

# Pick an pointer manager implementation based on the platform
if platform.python_implementation() == 'CPython':
    _UniffiPointerManager = _UniffiPointerManagerCPython # type: ignore
else:
    _UniffiPointerManager = _UniffiPointerManagerGeneral # type: ignore
# Types conforming to `_UniffiConverterPrimitive` pass themselves directly over the FFI.
class _UniffiConverterPrimitive:
    @classmethod
    def check(cls, value):
        return value

    @classmethod
    def lift(cls, value):
        return value

    @classmethod
    def lower(cls, value):
        return cls.lowerUnchecked(cls.check(value))

    @classmethod
    def lowerUnchecked(cls, value):
        return value

    @classmethod
    def write(cls, value, buf):
        cls.write_unchecked(cls.check(value), buf)

class _UniffiConverterPrimitiveInt(_UniffiConverterPrimitive):
    @classmethod
    def check(cls, value):
        try:
            value = value.__index__()
        except Exception:
            raise TypeError("'{}' object cannot be interpreted as an integer".format(type(value).__name__))
        if not isinstance(value, int):
            raise TypeError("__index__ returned non-int (type {})".format(type(value).__name__))
        if not cls.VALUE_MIN <= value < cls.VALUE_MAX:
            raise ValueError("{} requires {} <= value < {}".format(cls.CLASS_NAME, cls.VALUE_MIN, cls.VALUE_MAX))
        return super().check(value)

class _UniffiConverterPrimitiveFloat(_UniffiConverterPrimitive):
    @classmethod
    def check(cls, value):
        try:
            value = value.__float__()
        except Exception:
            raise TypeError("must be real number, not {}".format(type(value).__name__))
        if not isinstance(value, float):
            raise TypeError("__float__ returned non-float (type {})".format(type(value).__name__))
        return super().check(value)

# Helper class for wrapper types that will always go through a _UniffiRustBuffer.
# Classes should inherit from this and implement the `read` and `write` static methods.
class _UniffiConverterRustBuffer:
    @classmethod
    def lift(cls, rbuf):
        with rbuf.consume_with_stream() as stream:
            return cls.read(stream)

    @classmethod
    def lower(cls, value):
        with _UniffiRustBuffer.alloc_with_builder() as builder:
            cls.write(value, builder)
            return builder.finalize()

# Contains loading, initialization code,
# and the FFI Function declarations in a com.sun.jna.Library.
# Define some ctypes FFI types that we use in the library

"""
ctypes type for the foreign executor callback.  This is a built-in interface for scheduling
tasks

Args:
  executor: opaque c_size_t value representing the eventloop
  delay: delay in ms
  task: function pointer to the task callback
  task_data: void pointer to the task callback data

Normally we should call task(task_data) after the detail.
However, when task is NULL this indicates that Rust has dropped the ForeignExecutor and we should
decrease the EventLoop refcount.
"""
_UNIFFI_FOREIGN_EXECUTOR_CALLBACK_T = ctypes.CFUNCTYPE(None, ctypes.c_size_t, ctypes.c_uint32, ctypes.c_void_p, ctypes.c_void_p)

"""
Function pointer for a Rust task, which a callback function that takes a opaque pointer
"""
_UNIFFI_RUST_TASK = ctypes.CFUNCTYPE(None, ctypes.c_void_p)

def _uniffi_future_callback_t(return_type):
    """
    Factory function to create callback function types for async functions
    """
    return ctypes.CFUNCTYPE(None, ctypes.c_size_t, return_type, _UniffiRustCallStatus)

def _uniffi_load_indirect():
    """
    This is how we find and load the dynamic library provided by the component.
    For now we just look it up by name.
    """
    if sys.platform == "darwin":
        libname = "lib{}.dylib"
    elif sys.platform.startswith("win"):
        # As of python3.8, ctypes does not seem to search $PATH when loading DLLs.
        # We could use `os.add_dll_directory` to configure the search path, but
        # it doesn't feel right to mess with application-wide settings. Let's
        # assume that the `.dll` is next to the `.py` file and load by full path.
        libname = os.path.join(
            os.path.dirname(__file__),
            "{}.dll",
        )
    else:
        # Anything else must be an ELF platform - Linux, *BSD, Solaris/illumos
        libname = "lib{}.so"

    libname = libname.format("uniffi_dash_drive_v0")
    path = os.path.join(os.path.dirname(__file__), libname)
    lib = ctypes.cdll.LoadLibrary(path)
    return lib

def _uniffi_check_contract_api_version(lib):
    # Get the bindings contract version from our ComponentInterface
    bindings_contract_version = 22
    # Get the scaffolding contract version by calling the into the dylib
    scaffolding_contract_version = lib.ffi_dash_drive_v0_uniffi_contract_version()
    if bindings_contract_version != scaffolding_contract_version:
        raise InternalError("UniFFI contract version mismatch: try cleaning and rebuilding your project")

def _uniffi_check_api_checksums(lib):
    if lib.uniffi_drive_light_client_checksum_func_identities_by_pubkey_hashes_json() != 7640:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_drive_light_client_checksum_func_identity_by_pubkeys_proof_json() != 45852:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_drive_light_client_checksum_func_identity_proof_json() != 16376:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_drive_light_client_checksum_func_version() != 33802:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_drive_light_client_checksum_method_quoruminfoprovider_get_quorum_public_key() != 44554:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")

# A ctypes library to expose the extern-C FFI definitions.
# This is an implementation detail which will be called internally by the public API.

_UniffiLib = _uniffi_load_indirect()
_UniffiLib.uniffi_dash_drive_v0_fn_init_callback_quoruminfoprovider.argtypes = (
    _UNIFFI_FOREIGN_CALLBACK_T,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_dash_drive_v0_fn_init_callback_quoruminfoprovider.restype = None
_UniffiLib.uniffi_drive_light_client_fn_func_identities_by_pubkey_hashes_json.argtypes = (
    _UniffiRustBuffer,
    _UniffiRustBuffer,
    ctypes.c_uint64,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_drive_light_client_fn_func_identities_by_pubkey_hashes_json.restype = _UniffiRustBuffer
_UniffiLib.uniffi_drive_light_client_fn_func_identity_by_pubkeys_proof_json.argtypes = (
    _UniffiRustBuffer,
    _UniffiRustBuffer,
    ctypes.c_uint64,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_drive_light_client_fn_func_identity_by_pubkeys_proof_json.restype = _UniffiRustBuffer
_UniffiLib.uniffi_drive_light_client_fn_func_identity_proof_json.argtypes = (
    _UniffiRustBuffer,
    _UniffiRustBuffer,
    ctypes.c_uint64,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_drive_light_client_fn_func_identity_proof_json.restype = _UniffiRustBuffer
_UniffiLib.uniffi_drive_light_client_fn_func_version.argtypes = (
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_drive_light_client_fn_func_version.restype = _UniffiRustBuffer
_UniffiLib.ffi_dash_drive_v0_rustbuffer_alloc.argtypes = (
    ctypes.c_int32,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.ffi_dash_drive_v0_rustbuffer_alloc.restype = _UniffiRustBuffer
_UniffiLib.ffi_dash_drive_v0_rustbuffer_from_bytes.argtypes = (
    _UniffiForeignBytes,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.ffi_dash_drive_v0_rustbuffer_from_bytes.restype = _UniffiRustBuffer
_UniffiLib.ffi_dash_drive_v0_rustbuffer_free.argtypes = (
    _UniffiRustBuffer,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.ffi_dash_drive_v0_rustbuffer_free.restype = None
_UniffiLib.ffi_dash_drive_v0_rustbuffer_reserve.argtypes = (
    _UniffiRustBuffer,
    ctypes.c_int32,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.ffi_dash_drive_v0_rustbuffer_reserve.restype = _UniffiRustBuffer
_UniffiLib.uniffi_drive_light_client_checksum_func_identities_by_pubkey_hashes_json.argtypes = (
)
_UniffiLib.uniffi_drive_light_client_checksum_func_identities_by_pubkey_hashes_json.restype = ctypes.c_uint16
_UniffiLib.uniffi_drive_light_client_checksum_func_identity_by_pubkeys_proof_json.argtypes = (
)
_UniffiLib.uniffi_drive_light_client_checksum_func_identity_by_pubkeys_proof_json.restype = ctypes.c_uint16
_UniffiLib.uniffi_drive_light_client_checksum_func_identity_proof_json.argtypes = (
)
_UniffiLib.uniffi_drive_light_client_checksum_func_identity_proof_json.restype = ctypes.c_uint16
_UniffiLib.uniffi_drive_light_client_checksum_func_version.argtypes = (
)
_UniffiLib.uniffi_drive_light_client_checksum_func_version.restype = ctypes.c_uint16
_UniffiLib.uniffi_drive_light_client_checksum_method_quoruminfoprovider_get_quorum_public_key.argtypes = (
)
_UniffiLib.uniffi_drive_light_client_checksum_method_quoruminfoprovider_get_quorum_public_key.restype = ctypes.c_uint16
_UniffiLib.ffi_dash_drive_v0_uniffi_contract_version.argtypes = (
)
_UniffiLib.ffi_dash_drive_v0_uniffi_contract_version.restype = ctypes.c_uint32
_uniffi_check_contract_api_version(_UniffiLib)
_uniffi_check_api_checksums(_UniffiLib)

# Public interface members begin here.


class _UniffiConverterUInt8(_UniffiConverterPrimitiveInt):
    CLASS_NAME = "u8"
    VALUE_MIN = 0
    VALUE_MAX = 2**8

    @staticmethod
    def read(buf):
        return buf.read_u8()

    @staticmethod
    def write_unchecked(value, buf):
        buf.write_u8(value)

class _UniffiConverterUInt32(_UniffiConverterPrimitiveInt):
    CLASS_NAME = "u32"
    VALUE_MIN = 0
    VALUE_MAX = 2**32

    @staticmethod
    def read(buf):
        return buf.read_u32()

    @staticmethod
    def write_unchecked(value, buf):
        buf.write_u32(value)

class _UniffiConverterString:
    @staticmethod
    def check(value):
        if not isinstance(value, str):
            raise TypeError("argument must be str, not {}".format(type(value).__name__))
        return value

    @staticmethod
    def read(buf):
        size = buf.read_i32()
        if size < 0:
            raise InternalError("Unexpected negative string length")
        utf8_bytes = buf.read(size)
        return utf8_bytes.decode("utf-8")

    @staticmethod
    def write(value, buf):
        value = _UniffiConverterString.check(value)
        utf8_bytes = value.encode("utf-8")
        buf.write_i32(len(utf8_bytes))
        buf.write(utf8_bytes)

    @staticmethod
    def lift(buf):
        with buf.consume_with_stream() as stream:
            return stream.read(stream.remaining()).decode("utf-8")

    @staticmethod
    def lower(value):
        value = _UniffiConverterString.check(value)
        with _UniffiRustBuffer.alloc_with_builder() as builder:
            builder.write(value.encode("utf-8"))
            return builder.finalize()


# Error
# We want to define each variant as a nested class that's also a subclass,
# which is tricky in Python.  To accomplish this we're going to create each
# class separately, then manually add the child classes to the base class's
# __dict__.  All of this happens in dummy class to avoid polluting the module
# namespace.
class Error(Exception):
    pass

_UniffiTempError = Error

class Error:  # type: ignore
    class NotInitialized(_UniffiTempError):
        def __init__(self):
            pass
        def __repr__(self):
            return "Error.NotInitialized({})".format(str(self))
    _UniffiTempError.NotInitialized = NotInitialized # type: ignore
    class AlreadyInitialized(_UniffiTempError):
        def __init__(self):
            pass
        def __repr__(self):
            return "Error.AlreadyInitialized({})".format(str(self))
    _UniffiTempError.AlreadyInitialized = AlreadyInitialized # type: ignore
    class DriveError(_UniffiTempError):
        def __init__(self, error):
            super().__init__(", ".join([
                "error={!r}".format(error),
            ]))
            self.error = error
        def __repr__(self):
            return "Error.DriveError({})".format(str(self))
    _UniffiTempError.DriveError = DriveError # type: ignore
    class ProtocolError(_UniffiTempError):
        def __init__(self, error):
            super().__init__(", ".join([
                "error={!r}".format(error),
            ]))
            self.error = error
        def __repr__(self):
            return "Error.ProtocolError({})".format(str(self))
    _UniffiTempError.ProtocolError = ProtocolError # type: ignore
    class EmptyResponse(_UniffiTempError):
        def __init__(self):
            pass
        def __repr__(self):
            return "Error.EmptyResponse({})".format(str(self))
    _UniffiTempError.EmptyResponse = EmptyResponse # type: ignore
    class EmptyResponseMetadata(_UniffiTempError):
        def __init__(self):
            pass
        def __repr__(self):
            return "Error.EmptyResponseMetadata({})".format(str(self))
    _UniffiTempError.EmptyResponseMetadata = EmptyResponseMetadata # type: ignore
    class EmptyResponseProof(_UniffiTempError):
        def __init__(self):
            pass
        def __repr__(self):
            return "Error.EmptyResponseProof({})".format(str(self))
    _UniffiTempError.EmptyResponseProof = EmptyResponseProof # type: ignore
    class DocumentMissingInProof(_UniffiTempError):
        def __init__(self):
            pass
        def __repr__(self):
            return "Error.DocumentMissingInProof({})".format(str(self))
    _UniffiTempError.DocumentMissingInProof = DocumentMissingInProof # type: ignore
    class RequestDecodeError(_UniffiTempError):
        def __init__(self, error):
            super().__init__(", ".join([
                "error={!r}".format(error),
            ]))
            self.error = error
        def __repr__(self):
            return "Error.RequestDecodeError({})".format(str(self))
    _UniffiTempError.RequestDecodeError = RequestDecodeError # type: ignore
    class ResponseDecodeError(_UniffiTempError):
        def __init__(self, error):
            super().__init__(", ".join([
                "error={!r}".format(error),
            ]))
            self.error = error
        def __repr__(self):
            return "Error.ResponseDecodeError({})".format(str(self))
    _UniffiTempError.ResponseDecodeError = ResponseDecodeError # type: ignore
    class DataEncodingError(_UniffiTempError):
        def __init__(self, error):
            super().__init__(", ".join([
                "error={!r}".format(error),
            ]))
            self.error = error
        def __repr__(self):
            return "Error.DataEncodingError({})".format(str(self))
    _UniffiTempError.DataEncodingError = DataEncodingError # type: ignore
    class SignDigestFailed(_UniffiTempError):
        def __init__(self, error):
            super().__init__(", ".join([
                "error={!r}".format(error),
            ]))
            self.error = error
        def __repr__(self):
            return "Error.SignDigestFailed({})".format(str(self))
    _UniffiTempError.SignDigestFailed = SignDigestFailed # type: ignore
    class SignatureVerificationError(_UniffiTempError):
        def __init__(self, error):
            super().__init__(", ".join([
                "error={!r}".format(error),
            ]))
            self.error = error
        def __repr__(self):
            return "Error.SignatureVerificationError({})".format(str(self))
    _UniffiTempError.SignatureVerificationError = SignatureVerificationError # type: ignore
    class InvalidQuorum(_UniffiTempError):
        def __init__(self, error):
            super().__init__(", ".join([
                "error={!r}".format(error),
            ]))
            self.error = error
        def __repr__(self):
            return "Error.InvalidQuorum({})".format(str(self))
    _UniffiTempError.InvalidQuorum = InvalidQuorum # type: ignore
    class InvalidSignatureFormat(_UniffiTempError):
        def __init__(self, error):
            super().__init__(", ".join([
                "error={!r}".format(error),
            ]))
            self.error = error
        def __repr__(self):
            return "Error.InvalidSignatureFormat({})".format(str(self))
    _UniffiTempError.InvalidSignatureFormat = InvalidSignatureFormat # type: ignore
    class InvalidPublicKey(_UniffiTempError):
        def __init__(self, error):
            super().__init__(", ".join([
                "error={!r}".format(error),
            ]))
            self.error = error
        def __repr__(self):
            return "Error.InvalidPublicKey({})".format(str(self))
    _UniffiTempError.InvalidPublicKey = InvalidPublicKey # type: ignore
    class InvalidSignature(_UniffiTempError):
        def __init__(self, error):
            super().__init__(", ".join([
                "error={!r}".format(error),
            ]))
            self.error = error
        def __repr__(self):
            return "Error.InvalidSignature({})".format(str(self))
    _UniffiTempError.InvalidSignature = InvalidSignature # type: ignore
    class UnexpectedCallbackError(_UniffiTempError):
        def __init__(self, error, reason):
            super().__init__(", ".join([
                "error={!r}".format(error),
                "reason={!r}".format(reason),
            ]))
            self.error = error
            self.reason = reason
        def __repr__(self):
            return "Error.UnexpectedCallbackError({})".format(str(self))
    _UniffiTempError.UnexpectedCallbackError = UnexpectedCallbackError # type: ignore

Error = _UniffiTempError # type: ignore
del _UniffiTempError


class _UniffiConverterTypeError(_UniffiConverterRustBuffer):
    @staticmethod
    def read(buf):
        variant = buf.read_i32()
        if variant == 1:
            return Error.NotInitialized(
            )
        if variant == 2:
            return Error.AlreadyInitialized(
            )
        if variant == 3:
            return Error.DriveError(
                error=_UniffiConverterString.read(buf),
            )
        if variant == 4:
            return Error.ProtocolError(
                error=_UniffiConverterString.read(buf),
            )
        if variant == 5:
            return Error.EmptyResponse(
            )
        if variant == 6:
            return Error.EmptyResponseMetadata(
            )
        if variant == 7:
            return Error.EmptyResponseProof(
            )
        if variant == 8:
            return Error.DocumentMissingInProof(
            )
        if variant == 9:
            return Error.RequestDecodeError(
                error=_UniffiConverterString.read(buf),
            )
        if variant == 10:
            return Error.ResponseDecodeError(
                error=_UniffiConverterString.read(buf),
            )
        if variant == 11:
            return Error.DataEncodingError(
                error=_UniffiConverterString.read(buf),
            )
        if variant == 12:
            return Error.SignDigestFailed(
                error=_UniffiConverterString.read(buf),
            )
        if variant == 13:
            return Error.SignatureVerificationError(
                error=_UniffiConverterString.read(buf),
            )
        if variant == 14:
            return Error.InvalidQuorum(
                error=_UniffiConverterString.read(buf),
            )
        if variant == 15:
            return Error.InvalidSignatureFormat(
                error=_UniffiConverterString.read(buf),
            )
        if variant == 16:
            return Error.InvalidPublicKey(
                error=_UniffiConverterString.read(buf),
            )
        if variant == 17:
            return Error.InvalidSignature(
                error=_UniffiConverterString.read(buf),
            )
        if variant == 18:
            return Error.UnexpectedCallbackError(
                error=_UniffiConverterString.read(buf),
                reason=_UniffiConverterString.read(buf),
            )
        raise InternalError("Raw enum value doesn't match any cases")

    @staticmethod
    def write(value, buf):
        if isinstance(value, Error.NotInitialized):
            buf.write_i32(1)
        if isinstance(value, Error.AlreadyInitialized):
            buf.write_i32(2)
        if isinstance(value, Error.DriveError):
            buf.write_i32(3)
            _UniffiConverterString.write(value.error, buf)
        if isinstance(value, Error.ProtocolError):
            buf.write_i32(4)
            _UniffiConverterString.write(value.error, buf)
        if isinstance(value, Error.EmptyResponse):
            buf.write_i32(5)
        if isinstance(value, Error.EmptyResponseMetadata):
            buf.write_i32(6)
        if isinstance(value, Error.EmptyResponseProof):
            buf.write_i32(7)
        if isinstance(value, Error.DocumentMissingInProof):
            buf.write_i32(8)
        if isinstance(value, Error.RequestDecodeError):
            buf.write_i32(9)
            _UniffiConverterString.write(value.error, buf)
        if isinstance(value, Error.ResponseDecodeError):
            buf.write_i32(10)
            _UniffiConverterString.write(value.error, buf)
        if isinstance(value, Error.DataEncodingError):
            buf.write_i32(11)
            _UniffiConverterString.write(value.error, buf)
        if isinstance(value, Error.SignDigestFailed):
            buf.write_i32(12)
            _UniffiConverterString.write(value.error, buf)
        if isinstance(value, Error.SignatureVerificationError):
            buf.write_i32(13)
            _UniffiConverterString.write(value.error, buf)
        if isinstance(value, Error.InvalidQuorum):
            buf.write_i32(14)
            _UniffiConverterString.write(value.error, buf)
        if isinstance(value, Error.InvalidSignatureFormat):
            buf.write_i32(15)
            _UniffiConverterString.write(value.error, buf)
        if isinstance(value, Error.InvalidPublicKey):
            buf.write_i32(16)
            _UniffiConverterString.write(value.error, buf)
        if isinstance(value, Error.InvalidSignature):
            buf.write_i32(17)
            _UniffiConverterString.write(value.error, buf)
        if isinstance(value, Error.UnexpectedCallbackError):
            buf.write_i32(18)
            _UniffiConverterString.write(value.error, buf)
            _UniffiConverterString.write(value.reason, buf)



import threading

class ConcurrentHandleMap:
    """
    A map where inserting, getting and removing data is synchronized with a lock.
    """

    def __init__(self):
        # type Handle = int
        self._left_map = {}  # type: Dict[Handle, Any]
        self._right_map = {}  # type: Dict[Any, Handle]

        self._lock = threading.Lock()
        self._current_handle = 0
        self._stride = 1


    def insert(self, obj):
        with self._lock:
            if obj in self._right_map:
                return self._right_map[obj]
            else:
                handle = self._current_handle
                self._current_handle += self._stride
                self._left_map[handle] = obj
                self._right_map[obj] = handle
                return handle

    def get(self, handle):
        with self._lock:
            return self._left_map.get(handle)

    def remove(self, handle):
        with self._lock:
            if handle in self._left_map:
                obj = self._left_map.pop(handle)
                del self._right_map[obj]
                return obj

# Magic number for the Rust proxy to call using the same mechanism as every other method,
# to free the callback once it's dropped by Rust.
IDX_CALLBACK_FREE = 0
# Return codes for callback calls
_UNIFFI_CALLBACK_SUCCESS = 0
_UNIFFI_CALLBACK_ERROR = 1
_UNIFFI_CALLBACK_UNEXPECTED_ERROR = 2

class _UniffiConverterCallbackInterface:
    _handle_map = ConcurrentHandleMap()

    def __init__(self, cb):
        self._foreign_callback = cb

    def drop(self, handle):
        self.__class__._handle_map.remove(handle)

    @classmethod
    def lift(cls, handle):
        obj = cls._handle_map.get(handle)
        if not obj:
            raise InternalError("The object in the handle map has been dropped already")

        return obj

    @classmethod
    def read(cls, buf):
        handle = buf.read_u64()
        cls.lift(handle)

    @classmethod
    def lower(cls, cb):
        handle = cls._handle_map.insert(cb)
        return handle

    @classmethod
    def write(cls, cb, buf):
        buf.write_u64(cls.lower(cb))

# Declaration and _UniffiConverters for QuorumInfoProvider Callback Interface

class QuorumInfoProvider:
    def get_quorum_public_key(self, quorum_type: "int",quorum_hash: "typing.List[int]"):
        raise NotImplementedError

    

def py_foreignCallbackCallbackInterfaceQuorumInfoProvider(handle, method, args_data, args_len, buf_ptr):
    
    def invoke_get_quorum_public_key(python_callback, args_stream, buf_ptr):
        def makeCall():return python_callback.get_quorum_public_key(
                _UniffiConverterUInt32.read(args_stream), 
                _UniffiConverterSequenceUInt8.read(args_stream)
                )

        def makeCallAndHandleReturn():
            rval = makeCall()
            with _UniffiRustBuffer.alloc_with_builder() as builder:
                _UniffiConverterSequenceUInt8.write(rval, builder)
                buf_ptr[0] = builder.finalize()
            return _UNIFFI_CALLBACK_SUCCESS
        try:
            return makeCallAndHandleReturn()
        except Error as e:
            # Catch errors declared in the UDL file
            with _UniffiRustBuffer.alloc_with_builder() as builder:
                _UniffiConverterTypeError.write(e, builder)
                buf_ptr[0] = builder.finalize()
            return _UNIFFI_CALLBACK_ERROR

    

    cb = _UniffiConverterCallbackInterfaceQuorumInfoProvider.lift(handle)
    if not cb:
        raise InternalError("No callback in handlemap; this is a uniffi bug")

    if method == IDX_CALLBACK_FREE:
        _UniffiConverterCallbackInterfaceQuorumInfoProvider.drop(handle)
        # Successfull return
        # See docs of ForeignCallback in `uniffi_core/src/ffi/foreigncallbacks.rs`
        return _UNIFFI_CALLBACK_SUCCESS

    if method == 1:
        # Call the method and handle any errors
        # See docs of ForeignCallback in `uniffi_core/src/ffi/foreigncallbacks.rs` for details
        try:
            return invoke_get_quorum_public_key(cb, _UniffiRustBufferStream(args_data, args_len), buf_ptr)
        except BaseException as e:
            # Catch unexpected errors
            try:
                # Try to serialize the exception into a String
                buf_ptr[0] = _UniffiConverterString.lower(repr(e))
            except:
                # If that fails, just give up
                pass
            return _UNIFFI_CALLBACK_UNEXPECTED_ERROR
    

    # This should never happen, because an out of bounds method index won't
    # ever be used. Once we can catch errors, we should return an InternalException.
    # https://github.com/mozilla/uniffi-rs/issues/351

    # An unexpected error happened.
    # See docs of ForeignCallback in `uniffi_core/src/ffi/foreigncallbacks.rs`
    return _UNIFFI_CALLBACK_UNEXPECTED_ERROR

# We need to keep this function reference alive:
# if they get GC'd while in use then UniFFI internals could attempt to call a function
# that is in freed memory.
# That would be...uh...bad. Yeah, that's the word. Bad.
foreignCallbackCallbackInterfaceQuorumInfoProvider = _UNIFFI_FOREIGN_CALLBACK_T(py_foreignCallbackCallbackInterfaceQuorumInfoProvider)
_rust_call(lambda err: _UniffiLib.uniffi_dash_drive_v0_fn_init_callback_quoruminfoprovider(foreignCallbackCallbackInterfaceQuorumInfoProvider, err))

# The _UniffiConverter which transforms the Callbacks in to Handles to pass to Rust.
_UniffiConverterCallbackInterfaceQuorumInfoProvider = _UniffiConverterCallbackInterface(foreignCallbackCallbackInterfaceQuorumInfoProvider)



class _UniffiConverterSequenceUInt8(_UniffiConverterRustBuffer):
    @classmethod
    def write(cls, value, buf):
        items = len(value)
        buf.write_i32(items)
        for item in value:
            _UniffiConverterUInt8.write(item, buf)

    @classmethod
    def read(cls, buf):
        count = buf.read_i32()
        if count < 0:
            raise InternalError("Unexpected negative sequence length")

        return [
            _UniffiConverterUInt8.read(buf) for i in range(count)
        ]

def identities_by_pubkey_hashes_json(request: "typing.List[int]",response: "typing.List[int]",callback: "QuorumInfoProvider"):
    
    
    
    return _UniffiConverterSequenceUInt8.lift(_rust_call_with_error(_UniffiConverterTypeError,_UniffiLib.uniffi_drive_light_client_fn_func_identities_by_pubkey_hashes_json,
        _UniffiConverterSequenceUInt8.lower(request),
        _UniffiConverterSequenceUInt8.lower(response),
        _UniffiConverterCallbackInterfaceQuorumInfoProvider.lower(callback)))


def identity_by_pubkeys_proof_json(request: "typing.List[int]",response: "typing.List[int]",callback: "QuorumInfoProvider"):
    
    
    
    return _UniffiConverterSequenceUInt8.lift(_rust_call_with_error(_UniffiConverterTypeError,_UniffiLib.uniffi_drive_light_client_fn_func_identity_by_pubkeys_proof_json,
        _UniffiConverterSequenceUInt8.lower(request),
        _UniffiConverterSequenceUInt8.lower(response),
        _UniffiConverterCallbackInterfaceQuorumInfoProvider.lower(callback)))


def identity_proof_json(request: "typing.List[int]",response: "typing.List[int]",callback: "QuorumInfoProvider"):
    
    
    
    return _UniffiConverterSequenceUInt8.lift(_rust_call_with_error(_UniffiConverterTypeError,_UniffiLib.uniffi_drive_light_client_fn_func_identity_proof_json,
        _UniffiConverterSequenceUInt8.lower(request),
        _UniffiConverterSequenceUInt8.lower(response),
        _UniffiConverterCallbackInterfaceQuorumInfoProvider.lower(callback)))


def version():
    return _UniffiConverterString.lift(_rust_call(_UniffiLib.uniffi_drive_light_client_fn_func_version,))


__all__ = [
    "InternalError",
    "Error",
    "identities_by_pubkey_hashes_json",
    "identity_by_pubkeys_proof_json",
    "identity_proof_json",
    "version",
    "QuorumInfoProvider",
]

